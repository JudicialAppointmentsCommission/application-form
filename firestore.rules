service cloud.firestore {
  function userIsAuthenticated() {
    return request.auth.uid != null;
  }

  match /databases/{database}/documents {
    match /applicants/{userId} {
      // Users can read & write to their own applicant document
      allow get, create, update: if request.auth.uid == userId;
    }

    match /meta/stats {
      // allow any authenticated user to read & write meta
      // @todo restrict this to admin
      allow read, write: if userIsAuthenticated();
    }

    match /applications/{application} {
      function currentUser() {
        return request.auth.uid;
      }

      // Allow existing records which belong to the current user
      allow get, list: if resource.data.userId == currentUser();

      // Allow new records if they will belong to the current user
      allow create: if request.resource.data.userId == currentUser();

      // Allow updates on records which belong, and will continue to belong, to the current user
      // But only if the application isn't in a 'submitted' state
      allow update: if resource.data.userId == currentUser() &&
                       request.resource.data.userId == currentUser();
                       //  && resource.data.state != "submitted";
    }
    
    match /vacancies/{vacancy} {
      // Authenticated users can read
      allow get: if userIsAuthenticated();
    }

    match /exercises/{exercise} {
      // Authenticated users can read
      allow get, list, write: if userIsAuthenticated();
    }

    match /references/{reference} {
      // World readable if you know the document ID (`get` allowed)
      // But cannot query the collection (`list` not allowed)
      allow get;
    }
    
    match /candidates/{userId} {
  		// Users can read & write to their own candidate document
      allow get, create, update: if request.auth.uid == userId;
    }

    match /tests/{test} {
      // Authenticated users can read
      allow get: if userIsAuthenticated();
    }

    match /usersTests/{userTest} {
      function belongsToCurrentUser(res) {
        return res.data.userUid == request.auth.uid;
      }

      function doesNotExist() {
        return resource == null;
      }

      // Allow read on records which belong to the current user
      // Also allow reads to documents which don't yet exist â€“ so our client-side app can
      // listen for changes on documents it hasn't created yet
      allow get, list: if userIsAuthenticated() &&
                          (belongsToCurrentUser(resource) || doesNotExist());

      // Allow new records if they will belong to the current user
      allow create: if userIsAuthenticated() &&
                       belongsToCurrentUser(request.resource);

      // Allow updates on records which belong, and will continue to belong, to the current user
      allow update: if userIsAuthenticated() &&
                       belongsToCurrentUser(resource) &&
                       belongsToCurrentUser(request.resource);
    }
  }
}
